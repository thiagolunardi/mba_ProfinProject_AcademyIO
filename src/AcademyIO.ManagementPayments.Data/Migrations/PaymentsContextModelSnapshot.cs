// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using AcademyIO.ManagementPayments.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademyIO.ManagementPayments.Data.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(PaymentsContext))]
    partial class PaymentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("AcademyIO.ManagementPayments.Business.BusinessTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusTransaction")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("AcademyIO.ManagementPayments.Business.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardCVV")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<string>("CardExpirationDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("AcademyIO.ManagementPayments.Business.BusinessTransaction", b =>
                {
                    b.HasOne("AcademyIO.ManagementPayments.Business.Payment", "Payment")
                        .WithOne("Transaction")
                        .HasForeignKey("AcademyIO.ManagementPayments.Business.BusinessTransaction", "PaymentId")
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("AcademyIO.ManagementPayments.Business.Payment", b =>
                {
                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
